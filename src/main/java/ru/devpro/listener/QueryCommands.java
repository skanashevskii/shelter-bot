package ru.devpro.listener;

import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.model.Update;
import com.pengrad.telegrambot.model.request.InlineKeyboardMarkup;
import com.pengrad.telegrambot.request.SendMessage;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.devpro.dto.ShelterLocationDTO;
import ru.devpro.enums.BotCommand;
import ru.devpro.listener.handlersbd.ChangeBD;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

@Component
public class QueryCommands implements Command {

    private final TelegramBot bot;
    private final ChangeBD changeBD;

    public QueryCommands(TelegramBot bot, ChangeBD changeBD) {
        this.bot = bot;

        this.changeBD = changeBD;
    }

    @Override
    public boolean ifSuitable(Update update) {
        if (update != null && update.callbackQuery() != null) {
            String text = update.callbackQuery().data();
            return Arrays.stream(BotCommand.values())
                    .anyMatch(botCommand -> botCommand.getCommand().equalsIgnoreCase(text));

        }
        return false;
    }

    @Override
    public void handle(Update update) throws TelegramApiException {
        if (update.callbackQuery() != null) {
            var chatId = update.callbackQuery().message().chat().id();
            var callbackData = update.callbackQuery().data();
            //sendSheltersMessage(chatId, callbackData);
            System.out.println("Received callbackData: " + callbackData);
            // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É –∏–∑ enum, –∏—Å–ø–æ–ª—å–∑—É—è callbackData
            BotCommand command = Arrays.stream(BotCommand.values())
                    .filter(cmd -> cmd.getCommand().equalsIgnoreCase(callbackData))
                    .findFirst()
                    .orElse(null);

            if (command != null) {
                switch (command) {
                    case CALL_VOLUNTEER -> sendVolunteerMessage(chatId);
                    case SHELTERS -> createSheltersButtons(chatId);
                    case PASS -> sendPassInfo(chatId);
                    case ADDRESS -> sendAddressMessage(chatId);
                    case CYNOLOGISTS -> sendKinologsInfo(chatId);
                    case ADVICE_CYNOLOGISTS -> sendKinologsAdvice(chatId);
                    //case ADD_SHELTER_LOCATION -> ChangeBD.createShelterLocation(chatId);
                    case ADD_SHELTER -> changeBD.createShelter(chatId);
                    case ADD_USER -> changeBD.createUser(chatId);
                    case ADD_ANIMAL -> changeBD.createAnimalWithAvatar(chatId);
                    case CAT_SHELTER -> createCatShelterButtons(chatId);
                    case DOG_SHELTER -> createDogShelterButtons(chatId);
                    case SCHEDULE -> sendScheduleMessage(chatId);
                    case ABOUT_SHELTERS -> sendShelterInfo(chatId);
                    case SECURITY -> sendSecurityMessage(chatId);
                    case SAFETY -> sendSafetyMessage(chatId);
                    case CONTACT -> sendContactMessage(chatId);
                    case CAT_SHELTER_INFO-> sendCatShelterAddress(chatId);
                    case DOG_SHELTER_INFO-> sendDogShelterAddress(chatId);
                    default -> bot.execute(new SendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É."));
                }
            }


        }


    }




    private void sendAddressMessage(Long chatId) {

            RestTemplate restTemplate = new RestTemplate();
            String apiUrl = "http://localhost:8080/shelterLocation/{id}"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL

            // –ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            Map<String, String> uriVariables = new HashMap<>();
            uriVariables.put("id", "1"); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä

            ShelterLocationDTO shelterLocationDTO = restTemplate.getForObject(apiUrl, ShelterLocationDTO.class, uriVariables);

            if (shelterLocationDTO != null) {
                // –§–æ—Ä–º–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                String message =
                        "–ê–¥—Ä–µ—Å –ø—Ä–∏—é—Ç–∞:\n" +
                        "–£–ª–∏—Ü–∞: " + shelterLocationDTO.getAddress() + "\n" +
                        "–ì–æ—Ä–æ–¥: " + shelterLocationDTO.getCity() + "\n" +
                        "–†–∞–π–æ–Ω: " + shelterLocationDTO.getState() + "\n" +
                        "–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: " + shelterLocationDTO.getZipcode();

                SendMessage sendMessage = new SendMessage(chatId, message);

                bot.execute(sendMessage);
            } else {
                SendMessage notFoundMessage = new SendMessage(chatId, "–ü—Ä–∏—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");

                bot.execute(notFoundMessage);
            }
        }
    private void sendCatShelterAddress(Long chatId) {
        RestTemplate restTemplate = new RestTemplate();
        String apiUrl = "http://localhost:8080/shelterLocation/{id}"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL

        // –ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        Map<String, String> uriVariables = new HashMap<>();
        uriVariables.put("id", "2"); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä

        ShelterLocationDTO shelterLocationDTO = restTemplate.getForObject(apiUrl, ShelterLocationDTO.class, uriVariables);

        if (shelterLocationDTO != null) {
            // –§–æ—Ä–º–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            String message = "–ê–¥—Ä–µ—Å –ø—Ä–∏—é—Ç–∞:\n" +
                    "–£–ª–∏—Ü–∞: " + shelterLocationDTO.getAddress() + "\n" +
                    "–ì–æ—Ä–æ–¥: " + shelterLocationDTO.getCity() + "\n" +
                    "–†–∞–π–æ–Ω: " + shelterLocationDTO.getState() + "\n" +
                    "–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: " + shelterLocationDTO.getZipcode();

            SendMessage sendMessage = new SendMessage(chatId, message);

            bot.execute(sendMessage);
        } else {
            SendMessage notFoundMessage = new SendMessage(chatId, "–ü—Ä–∏—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");

            bot.execute(notFoundMessage);
        }
    }
    private void sendDogShelterAddress(Long chatId) {
        RestTemplate restTemplate = new RestTemplate();
        String apiUrl = "http://localhost:8080/shelterLocation/{id}"; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL

        // –ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        Map<String, String> uriVariables = new HashMap<>();
        uriVariables.put("id", "3"); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä

        ShelterLocationDTO shelterLocationDTO = restTemplate.getForObject(apiUrl, ShelterLocationDTO.class, uriVariables);

        if (shelterLocationDTO != null) {
            // –§–æ—Ä–º–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            String message = "–ê–¥—Ä–µ—Å –ø—Ä–∏—é—Ç–∞:\n" +
                    "–£–ª–∏—Ü–∞: " + shelterLocationDTO.getAddress() + "\n" +
                    "–ì–æ—Ä–æ–¥: " + shelterLocationDTO.getCity() + "\n" +
                    "–†–∞–π–æ–Ω: " + shelterLocationDTO.getState() + "\n" +
                    "–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: " + shelterLocationDTO.getZipcode();

            SendMessage sendMessage = new SendMessage(chatId, message);

            bot.execute(sendMessage);
        } else {
            SendMessage notFoundMessage = new SendMessage(chatId, "–ü—Ä–∏—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");

            bot.execute(notFoundMessage);
        }
    }


    void createSheltersButtons(Long chatId) {
        String downArrow = "üëá";
        // If the user sent "/shelters," send a message with buttons
        InlineKeyboardMarkup sheltersKeyboard =
                new InlineKeyboardMarkup();
        sheltersKeyboard.addRow(BotCommand.CAT_SHELTER.getButton());
        sheltersKeyboard.addRow(BotCommand.DOG_SHELTER.getButton());
        sheltersKeyboard.addRow(BotCommand.ADD_SHELTER_LOCATION.getButton());
        sheltersKeyboard.addRow(BotCommand.ADD_SHELTER.getButton());
        sheltersKeyboard.addRow(BotCommand.ADD_USER.getButton());
        sheltersKeyboard.addRow(BotCommand.ADD_ANIMAL.getButton());

        SendMessage message = new SendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—é—Ç:" + "üëá");
        message.replyMarkup(sheltersKeyboard);
        bot.execute(message);

        }

    private void sendContactMessage(Long chatId) {
    }

    private void sendSafetyMessage(Long chatId) {
    }

    private void sendSecurityMessage(Long chatId) {
    }

    private void sendVolunteerMessage(Long chatId) {
    }

    private void createCatShelterButtons(Long chatId) {
        InlineKeyboardMarkup catKeyboard = new InlineKeyboardMarkup(BotCommand.DATE.getButton());
        catKeyboard.addRow(BotCommand.DOCUMENTS.getButton());
        catKeyboard.addRow(BotCommand.TRANSPORTATION.getButton());
        catKeyboard.addRow(BotCommand.CAT_HOME.getButton());
        catKeyboard.addRow(BotCommand.KITTEN_HOME.getButton());
        catKeyboard.addRow(BotCommand.DISABLED_CAT.getButton());
        catKeyboard.addRow(BotCommand.CAT_SHELTER_INFO.getButton());

        SendMessage message = new SendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:" + "üëá");
        message.replyMarkup(catKeyboard);
        bot.execute(message);
    }

    private void createDogShelterButtons(Long chatId) {

            InlineKeyboardMarkup dogKeyboard = new InlineKeyboardMarkup(BotCommand.DATE.getButton());
            dogKeyboard.addRow(BotCommand.DOCUMENTS.getButton());
            dogKeyboard.addRow(BotCommand.TRANSPORTATION.getButton());
            dogKeyboard.addRow(BotCommand.DOG_HOME.getButton());
            dogKeyboard.addRow(BotCommand.PUPPY_HOME.getButton());
            dogKeyboard.addRow(BotCommand.DISABLED_DOG.getButton());
            dogKeyboard.addRow(BotCommand.ADVICE_CYNOLOGISTS.getButton());
            dogKeyboard.addRow(BotCommand.CYNOLOGISTS.getButton());
            dogKeyboard.addRow(BotCommand.REFUSAL.getButton());
            dogKeyboard.addRow(BotCommand.DOG_SHELTER_INFO.getButton());

        SendMessage message = new SendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:" + "üëá");
        message.replyMarkup(dogKeyboard);
        bot.execute(message);
    }

    private void sendScheduleMessage(Long chatId) {

    }

    private void sendAboutScheduleMessage(Long chatId) {
    }
    private void sendResponseMessage(Long chatId, String message) {
        SendMessage responseMessage = new SendMessage(chatId, message);
        bot.execute(responseMessage);
    }

    public String readShelterInfoFromFile() {
        try {
            //  –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏—é—Ç–µ
            Path filePath = Paths.get("./shelters_file/informaciya_o_priyute.txt");
            return new String(Files.readAllBytes(filePath));
        } catch (IOException e) {
            e.printStackTrace();
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—é—Ç–µ.";
        }
    }
    public void sendShelterInfo(Long chatId) {
        String shelterInfo = readShelterInfoFromFile(); // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—é—Ç–µ –∏–∑ —Ñ–∞–π–ª–∞
        SendMessage sendMessage = new SendMessage(chatId, shelterInfo);

        bot.execute(sendMessage);
    }
    public String aboutPassInfoFromFile() {
        try {
            // –Ω–∞ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏—é—Ç–µ
            Path filePath = Paths.get("./shelters_file/propusk.txt");
            return new String(Files.readAllBytes(filePath));
        } catch (IOException e) {
            e.printStackTrace();
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—é—Ç–µ.";
        }
    }
    public void sendPassInfo(Long chatId) {
        String passInfo = aboutPassInfoFromFile(); // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—é—Ç–µ –∏–∑ —Ñ–∞–π–ª–∞
        SendMessage sendMessage = new SendMessage(chatId, passInfo);

        bot.execute(sendMessage);
    }
    public String aboutKinologsFromFile() {
        try {
            //  –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏—é—Ç–µ
            Path kinilogsInfo = Paths.get("./shelters_file/kinologs.txt");
            return new String(Files.readAllBytes(kinilogsInfo));
        } catch (IOException e) {
            e.printStackTrace();
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—é—Ç–µ.";
        }
    }
    public void sendKinologsInfo(Long chatId) {
        String kinologsInfo = aboutKinologsFromFile(); // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∏–Ω–æ–ª–æ–≥–∞—Ö –∏–∑ —Ñ–∞–π–ª–∞
        SendMessage sendMessage = new SendMessage(chatId, kinologsInfo);

        bot.execute(sendMessage);
    }
    private String aboutAdviceKinolog() {
        try {
            //  –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏—é—Ç–µ
            Path kinilogsAdvice = Paths.get("./shelters_file/advices_from_kinolog.txt");
            return new String(Files.readAllBytes(kinilogsAdvice));
        } catch (IOException e) {
            e.printStackTrace();
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—é—Ç–µ.";
        }
    }
    public void sendKinologsAdvice(Long chatId) {
        String kinologAdvice = aboutAdviceKinolog(); // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ–≤–µ—Ç—ã –∫–∏–Ω–æ–ª–æ–≥–∞ –∏–∑ —Ñ–∞–π–ª–∞
        SendMessage sendMessage = new SendMessage(chatId, kinologAdvice);

        bot.execute(sendMessage);
    }
}
